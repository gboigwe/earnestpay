# AptosPayroll Development Rules for Claude Code CLI

## Project Overview
Build **AptosPayroll** - A decentralized payroll management tool for the Aptos Ctrl+MOVE Hackathon. The application provides on-chain salary disbursement in stablecoins with integrated tax calculation and compliance features.

**Hackathon Deadline:** October 3, 2025  
**Target Prize Categories:** Main Track ($65,000 pool) and Best Tech Implementation ($15,000)

## Core Research Requirements

**MANDATORY:** Before starting any implementation phase, research and document:
1. Current Aptos Move language best practices and recent updates
2. Existing payroll blockchain solutions and their limitations  
3. Regulatory compliance requirements for crypto payroll (focus on US, EU, major markets)
4. Stablecoin integration patterns on Aptos (USDC, USDT, DAI implementations)
5. Tax calculation algorithms for crypto payments
6. Smart contract security patterns for financial applications

---

## STAGE 1: Project Foundation & Architecture (Days 1-3)

### 1.1 Environment Setup & Research
**Checkpoint 1.1:** Complete development environment setup

**Actions:**
```bash
# Research and install latest Aptos tooling
# Document version numbers and compatibility
```

**Research Requirements:**
- Latest Aptos CLI installation and configuration
- Move compiler version compatibility
- IDE setup (VS Code with Move extension)
- Testnet/Devnet configuration best practices
- Current Aptos documentation review

**Tasks:**
1. Install and configure Aptos CLI
2. Set up Move development environment 
3. Create project workspace with proper directory structure
4. Configure testnet accounts and fund with test APT
5. Research and document Aptos native frameworks and libraries

**Deliverables:**
- Functioning development environment
- Test transaction execution on devnet
- Project structure documentation
- Research summary of Aptos ecosystem

---

### 1.2 System Architecture Design
**Checkpoint 1.2:** Complete system architecture and technical specifications

**Research Requirements:**
- Study existing DeFi payroll solutions (traditional and blockchain-based)
- Analyze smart contract patterns for multi-sig and automated payments
- Research Aptos Object framework for complex data structures
- Review compliance requirements for automated tax withholding

**Architecture Components:**
1. **Core Smart Contracts:**
   - PayrollManager (main contract)
   - EmployeeRegistry 
   - PaymentScheduler
   - TaxCalculator
   - ComplianceTracker

2. **Frontend Application:**
   - Employer dashboard
   - Employee portal  
   - Admin interface

3. **Integration Layer:**
   - Stablecoin payment modules
   - External API connectors
   - Reporting system

**Tasks:**
1. Design smart contract architecture with clear separation of concerns
2. Define data structures for employees, employers, payments, tax records
3. Create detailed API specifications
4. Plan database schema for off-chain data (if needed)
5. Design security model and access controls

**Deliverables:**
- System architecture diagram
- Smart contract specifications
- API documentation draft
- Security model documentation
- Technical feasibility report

---

## STAGE 2: Core Smart Contract Development (Days 4-10)

### 2.1 Foundation Contracts
**Checkpoint 2.1:** Basic contract structure and employee management

**Research Requirements:**
- Study Aptos resource and object patterns for employee data
- Research access control mechanisms in Move
- Analyze existing identity verification patterns on blockchain
- Review gas optimization techniques for Move contracts

**Smart Contracts to Implement:**

#### PayrollManager.move
```move
module payroll_addr::payroll_manager {
    // Core payroll management logic
    // Company registration and management
    // Employee onboarding workflows
    // Payment authorization systems
}
```

#### EmployeeRegistry.move  
```move
module payroll_addr::employee_registry {
    // Employee profile management
    // KYC/verification status tracking
    // Role and permission management
    // Employment history
}
```

**Tasks:**
1. Research and implement employee data structures using Aptos Objects
2. Create company registration and verification system
3. Build employee onboarding workflows with KYC requirements
4. Implement role-based access control (admin, HR, employee, accountant)
5. Add events for all major state changes
6. Write comprehensive unit tests for each function

**Deliverables:**
- Functional employee and company management contracts
- Complete test suite with >90% coverage
- Event emission for audit trails
- Gas usage optimization report

---

### 2.2 Payment & Tax Systems
**Checkpoint 2.2:** Payment processing and tax calculation implementation

**Research Requirements:**
- Study stablecoin standards on Aptos (fungible asset framework)
- Research tax calculation algorithms for different jurisdictions
- Analyze smart contract patterns for scheduled payments
- Review compliance requirements for automated tax withholding

#### PaymentScheduler.move
```move
module payroll_addr::payment_scheduler {
    // Automated salary disbursement logic
    // Recurring payment schedules (weekly, biweekly, monthly)
    // Bonus and overtime payment handling
    // Multi-currency support for stablecoins
}
```

#### TaxCalculator.move
```move
module payroll_addr::tax_calculator {
    // Tax calculation algorithms by jurisdiction
    // Withholding calculation for different employee types
    // Integration with external tax rate APIs
    // Historical tax record maintenance
}
```

**Tasks:**
1. Research and implement stablecoin integration (USDC, USDT, DAI)
2. Build automated payment scheduling system
3. Create tax calculation engine supporting major tax jurisdictions
4. Implement withholding and deduction management
5. Add emergency payment capabilities and multi-sig requirements for large payments
6. Create comprehensive payment audit trails

**Deliverables:**
- Functional payment processing system
- Multi-jurisdiction tax calculation engine
- Automated scheduling with error handling
- Integration with major stablecoins
- Security audit of payment flows

---

## STAGE 3: Advanced Features & Compliance (Days 11-16)

### 3.1 Compliance & Reporting System
**Checkpoint 3.1:** Regulatory compliance and reporting functionality

**Research Requirements:**
- Study global payroll compliance requirements (GDPR, SOX, local tax laws)
- Research blockchain audit trail best practices
- Analyze reporting standards for automated payroll systems
- Review data privacy requirements for employee information

#### ComplianceTracker.move
```move
module payroll_addr::compliance_tracker {
    // Regulatory compliance monitoring
    // Automated compliance checks
    // Audit trail generation
    // Reporting for tax authorities
}
```

**Tasks:**
1. Research and implement automated compliance checking
2. Build comprehensive audit trail system
3. Create automated report generation for tax authorities
4. Implement data privacy controls (GDPR compliance)
5. Add alert system for compliance violations
6. Create templates for common regulatory reports

**Deliverables:**
- Automated compliance monitoring system
- Comprehensive audit trail functionality
- Report generation templates
- Data privacy compliance features

---

### 3.2 Treasury Management & Security
**Checkpoint 3.2:** Treasury management and enhanced security features

**Research Requirements:**
- Study multi-signature wallet patterns on Aptos
- Research treasury management best practices for crypto payroll
- Analyze smart contract security patterns and common vulnerabilities
- Review incident response procedures for financial applications

**Advanced Features:**
1. Multi-signature treasury management
2. Automated liquidity management for stablecoin reserves
3. Emergency pause/resume functionality
4. Role-based spending limits and approval workflows
5. Integration with external treasury management tools
6. Advanced security monitoring and incident response

**Tasks:**
1. Implement multi-sig treasury management system
2. Create automated liquidity monitoring and rebalancing
3. Build comprehensive security monitoring
4. Add emergency controls and circuit breakers
5. Implement advanced role-based permissions
6. Create disaster recovery procedures

**Deliverables:**
- Multi-sig treasury management system
- Automated liquidity management
- Enhanced security features
- Emergency response procedures

---

## STAGE 4: Frontend Development (Days 17-25)

### 4.1 Core Frontend Architecture
**Checkpoint 4.1:** Frontend foundation and wallet integration

**Research Requirements:**
- Study Aptos wallet integration patterns (Petra, Martian, Pontem)
- Research React/Next.js best practices for Web3 applications  
- Analyze user experience patterns for payroll applications
- Review accessibility standards for financial applications

**Frontend Stack:**
- **Framework:** Next.js with TypeScript
- **Styling:** Tailwind CSS
- **State Management:** Zustand or Context API
- **Aptos Integration:** @aptos-labs/ts-sdk
- **Charts/Visualization:** Recharts or Chart.js

**Tasks:**
1. Research and set up Next.js project with Aptos SDK integration
2. Implement wallet connection and authentication
3. Create responsive design system with Tailwind CSS
4. Build routing structure for different user roles
5. Implement error handling and loading states
6. Set up state management for application data

**Deliverables:**
- Functional Next.js application with wallet integration
- Responsive design system
- Authentication and routing system
- Error handling framework

---

### 4.2 Dashboard Development
**Checkpoint 4.2:** Complete user interfaces for all stakeholder types

**Research Requirements:**
- Study payroll dashboard UX patterns from traditional solutions
- Research data visualization best practices for financial data
- Analyze form design patterns for sensitive financial information
- Review notification and alert system designs

**Dashboard Components:**

#### Employer/Admin Dashboard
- Company setup and configuration
- Employee management interface
- Payment scheduling and approval
- Tax configuration and compliance monitoring
- Treasury management and liquidity monitoring
- Comprehensive reporting and analytics

#### Employee Portal  
- Personal payroll information and history
- Tax document access and download
- Payment method configuration
- Notification preferences
- Dispute resolution interface

#### Accountant Interface
- Tax calculation review and override
- Compliance report generation
- Audit trail access
- Bulk payment processing
- Financial reconciliation tools

**Tasks:**
1. Research and implement responsive dashboard layouts
2. Create interactive data visualization components
3. Build comprehensive form systems with validation
4. Implement real-time updates using WebSocket or polling
5. Add export functionality for reports and tax documents
6. Create mobile-responsive interfaces

**Deliverables:**
- Complete employer dashboard
- Functional employee portal
- Accountant interface
- Mobile-responsive design
- Real-time data updates

---

## STAGE 5: Integration & Testing (Days 26-32)

### 5.1 Integration Testing
**Checkpoint 5.1:** End-to-end system integration and testing

**Research Requirements:**
- Study testing frameworks for Move smart contracts
- Research integration testing patterns for Web3 applications
- Analyze performance testing methodologies for blockchain applications
- Review security testing procedures for financial applications

**Testing Requirements:**
1. **Smart Contract Testing:**
   - Unit tests for all contract functions
   - Integration tests for contract interactions
   - Gas usage optimization testing
   - Security vulnerability testing

2. **Frontend Testing:**
   - Component testing with React Testing Library
   - End-to-end testing with Playwright or Cypress
   - Cross-browser compatibility testing
   - Mobile responsiveness testing

3. **System Integration Testing:**
   - Wallet connection testing across different providers
   - Payment flow testing with actual stablecoin transactions
   - Error handling and recovery testing
   - Performance and load testing

**Tasks:**
1. Research and implement comprehensive test suites
2. Set up automated testing pipelines
3. Conduct security audits of smart contracts
4. Perform load testing with simulated user scenarios
5. Test edge cases and error conditions
6. Validate compliance with accessibility standards

**Deliverables:**
- Comprehensive test suite with >95% coverage
- Automated testing pipeline
- Security audit report
- Performance testing results
- Bug tracking and resolution documentation

---

### 5.2 Production Deployment Preparation
**Checkpoint 5.2:** Production-ready deployment configuration

**Research Requirements:**
- Study Aptos mainnet deployment best practices
- Research monitoring and observability patterns for Web3 applications
- Analyze backup and disaster recovery procedures
- Review incident response and support procedures

**Deployment Preparation:**
1. **Smart Contract Deployment:**
   - Mainnet deployment configuration
   - Contract verification and source code publication
   - Multi-signature setup for contract upgrades
   - Monitoring and alerting configuration

2. **Frontend Deployment:**
   - Production build optimization
   - CDN configuration for global performance
   - Environment configuration management
   - Monitoring and error tracking setup

3. **Infrastructure:**
   - Database backup and recovery procedures
   - API rate limiting and security
   - Log aggregation and monitoring
   - Incident response procedures

**Tasks:**
1. Configure production deployment environment
2. Set up monitoring and alerting systems
3. Create deployment automation scripts
4. Establish backup and recovery procedures
5. Prepare incident response documentation
6. Create user documentation and support materials

**Deliverables:**
- Production-ready deployment configuration
- Monitoring and alerting system
- Backup and recovery procedures
- User documentation
- Support and maintenance procedures

---

## STAGE 6: Launch Preparation & Documentation (Days 33-35)

### 6.1 Hackathon Submission Preparation
**Checkpoint 6.1:** Complete hackathon submission package

**Research Requirements:**
- Study previous winning hackathon submissions for format and content
- Research presentation best practices for technical demonstrations
- Analyze judging criteria to optimize submission materials

**Submission Requirements:**
1. **Technical Documentation:**
   - Complete architecture documentation
   - Smart contract documentation and verification
   - API documentation and integration guides
   - Security audit results and attestations

2. **Demonstration Materials:**
   - Live demo environment setup
   - Video demonstration (3-5 minutes)
   - Presentation slides highlighting key innovations
   - Use case scenarios and business value proposition

3. **Code Repository:**
   - Clean, well-documented codebase
   - Comprehensive README with setup instructions
   - Contributing guidelines and development setup
   - License and legal documentation

**Tasks:**
1. Create comprehensive project documentation
2. Record professional demo video showcasing key features
3. Prepare presentation materials highlighting innovations
4. Set up public demo environment for judges
5. Clean and document codebase for public release
6. Prepare business case and market analysis

**Deliverables:**
- Complete hackathon submission package
- Professional demo video and presentation
- Public demo environment
- Comprehensive documentation
- Business case presentation

---

## Key Success Metrics & Innovation Points

### Technical Innovation (Target: Best Tech Implementation Prize)
1. **Advanced Move Language Usage:**
   - Innovative use of Aptos Object framework
   - Efficient gas optimization techniques
   - Novel smart contract design patterns

2. **User Experience Innovation:**
   - Seamless wallet integration and onboarding
   - Intuitive interfaces for complex payroll operations
   - Mobile-first design approach

3. **Compliance Innovation:**
   - Automated multi-jurisdiction tax calculation
   - Real-time compliance monitoring
   - Blockchain-based audit trail system

### Competitive Advantages
1. **Technical Superiority:**
   - Sub-second transaction finality using Aptos capabilities
   - Near-zero transaction costs for micro-payments
   - Parallel execution optimization

2. **Feature Completeness:**
   - End-to-end payroll solution (not just payments)
   - Multi-stakeholder interfaces (employers, employees, accountants)
   - Comprehensive compliance and reporting

3. **Real-World Utility:**
   - Addresses actual business pain points
   - Scalable to enterprise-level operations
   - Integration-ready with existing HR systems

---

## Emergency Protocols & Risk Management

### Development Risks & Mitigation
1. **Technical Risks:**
   - Smart contract vulnerabilities → Comprehensive testing and security audits
   - Integration complexity → Modular development with clear interfaces
   - Performance issues → Regular performance testing and optimization

2. **Timeline Risks:**
   - Feature creep → Strict scope management and MVP focus
   - Dependency delays → Parallel development tracks where possible
   - Testing bottlenecks → Early and continuous testing

### Launch Risks & Contingency Plans
1. **Security Incidents:**
   - Emergency pause functionality in smart contracts
   - Incident response procedures and communication plans
   - Bug bounty program for community security testing

2. **Compliance Issues:**
   - Legal review of all compliance features
   - Conservative approach to regulatory requirements
   - Expert consultation for complex jurisdiction issues

---

## Claude Code CLI Execution Instructions

### General Execution Principles
1. **Research-First Approach:** Always research before implementing any component
2. **Iterative Development:** Build incrementally with frequent testing and validation
3. **Documentation-Driven:** Document architecture decisions and implementation details
4. **Security-Focused:** Prioritize security at every development stage
5. **User-Centric Design:** Always consider end-user experience and accessibility

### Checkpoint Validation
Each checkpoint must include:
- Functional demonstration of implemented features
- Comprehensive test results and coverage reports
- Security review and vulnerability assessment
- Performance metrics and optimization analysis
- Documentation updates and code comments
- Research summary and implementation rationale

### Success Criteria
**Minimum Viable Product (MVP):**
- Functional smart contracts for basic payroll operations
- Working frontend for employer and employee interactions
- Stablecoin integration for payments
- Basic tax calculation functionality
- Audit trail and reporting capabilities

**Competition-Winning Features:**
- Advanced compliance automation
- Multi-jurisdiction tax support
- Enterprise-grade security features
- Exceptional user experience design
- Comprehensive business solution

### Final Deliverables Checklist
- [ ] Fully functional smart contracts deployed on Aptos testnet
- [ ] Production-ready frontend application
- [ ] Comprehensive test suite with >95% coverage
- [ ] Security audit and vulnerability assessment
- [ ] Complete documentation and user guides
- [ ] Demo video and presentation materials
- [ ] Business case and market analysis
- [ ] Hackathon submission package

---

**Remember:** The goal is not just to build a functional application, but to create a competition-winning solution that demonstrates technical excellence, real-world utility, and innovative use of the Aptos blockchain platform.

**Research is mandatory before every implementation phase. Document all findings and architectural decisions. Prioritize security, user experience, and compliance throughout the development process.**